/*
 * Copyright 2015 Erik Van Hamme
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

OUTPUT_FORMAT ("elf32-littlearm")
GROUP(-lgcc -lc)
ENTRY(Reset_Handler)

/* The memory size descriptor will be generated by the buildscript. */
INCLUDE release/memory.ld

_brom = ORIGIN( flash );
_eram = ORIGIN( sram ) + LENGTH( sram );

/* Section Definitions. */ 
SECTIONS {
	.text : {
		KEEP(*(.isr_vector .isr_vector.*))
		*(.text .text.* .gnu.linkonce.t.*)
		*(.glue_7t) *(.glue_7)
		*(.rodata .rodata* .gnu.linkonce.r.*)

		/* C++ Static constructors (elf) (static destructors are not needed for embedded app)  */
		. = ALIGN(4);
		KEEP(*(.init))

		. = ALIGN(4);
		__preinit_array_start = .;
		KEEP (*(.preinit_array))
		__preinit_array_end = .;

		. = ALIGN(4);
		__init_array_start = .;
		KEEP (*(SORT(.init_array.*)))
		KEEP (*(.init_array))
		__init_array_end = .;

		. = ALIGN(0x4);
		KEEP (*crtbegin.o(.ctors))
		KEEP (*(EXCLUDE_FILE (*crtend.o) .ctors))
		KEEP (*(SORT(.ctors.*)))
		KEEP (*crtend.o(.ctors))
	} > flash

	.ARM.extab : {
		*(.ARM.extab* .gnu.linkonce.armextab.*)
	} > flash

	.ARM.exidx : {
		__exidx_start = .;
		*(.ARM.exidx* .gnu.linkonce.armexidx.*)
		__exidx_end = .;
	} > flash

	. = ALIGN(4);
	_etext = .;
	_sidata = .;

	.data : AT (_etext) {
		_sdata = .;
		*(.data .data.*)
		. = ALIGN(4);
		_edata = . ;
	} > sram

	.bss (NOLOAD) : {
		_sbss = . ;
		*(.bss .bss.*)
		*(COMMON)
		. = ALIGN(4);
		_ebss = . ;
	} > sram

	_heap_start = .;

	/* 
	 * According to http://wwwold.ece.utep.edu/courses/web3376/Stack.html
	 * "The SP should [...] be initialized [...] to the last available address in RAM +1."
	 */
	_estack = _eram;

    .ccm (NOLOAD) : {
        . = ALIGN(4);
        _sccm = .;
        *(.ccm .ccm.*)
        . = ALIGN(4);      
    _eccm = .;
    } > ccm

    .itcm (NOLOAD) : {
        . = ALIGN(4);
        _sitcm = .;
        *(.itcm .itcm.*)
        . = ALIGN(4);      
    _eitcm = .;
    } > itcm

    .dtcm (NOLOAD) : {
        . = ALIGN(4);
        _sdtcm = .;
        *(.dtcm .dtcm.*)
        . = ALIGN(4);      
    _edtcm = .;
    } > dtcm
}
